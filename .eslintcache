[{"D:\\Coding\\shopper\\src\\index.js":"1","D:\\Coding\\shopper\\src\\App.js":"2","D:\\Coding\\shopper\\src\\reportWebVitals.js":"3","D:\\Coding\\shopper\\src\\components\\Products.jsx":"4","D:\\Coding\\shopper\\src\\components\\Cart.jsx":"5","D:\\Coding\\shopper\\src\\config.js":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":914,"mtime":1608915656053,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"8"},{"size":1339,"mtime":1608915608245,"results":"11","hashOfConfig":"8"},{"size":2617,"mtime":1608916785834,"results":"12","hashOfConfig":"8"},{"size":45,"mtime":1608915506394,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"3d24tu",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Coding\\shopper\\src\\index.js",[],["28","29"],"D:\\Coding\\shopper\\src\\App.js",["30"],"D:\\Coding\\shopper\\src\\reportWebVitals.js",[],"D:\\Coding\\shopper\\src\\components\\Products.jsx",["31","32"],"D:\\Coding\\shopper\\src\\components\\Cart.jsx",["33","34","35","36"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport { HOST } from '../config.js';\r\n\r\nimport axios from 'axios';\r\n\r\n\r\nexport default function Cart({ cart, setCart }) {\r\n    \r\n    let discountPercentage = null;\r\n    let discountInEuro = null;\r\n\r\n    const [totalPrice, setTotalPrice] = useState(0);\r\n\r\n    useEffect(() => {\r\n        getTotalSum();\r\n    }, []);\r\n\r\n\r\n\r\n    const removeFromCart = async (productToRemove) => {\r\n         const indexFound = cart.findIndex(item => item._id == productToRemove._id);\r\n         const price = cart[indexFound].price;\r\n\r\n         if(cart[indexFound].quantity > 1) {\r\n           cart[indexFound].quantity--;\r\n         } else {\r\n          setCart(cart.filter(product => product !== productToRemove))\r\n         }\r\n        setTotalPrice(totalPrice - price);\r\n\r\n       const result = await axios.delete(HOST + '/cart/'+ productToRemove._id);\r\n\r\n\r\n      }\r\n\r\n\r\n      const clearCart = () => {\r\n        setCart([]);\r\n        axios.delete(HOST + '/cart/empty-cart')\r\n      }\r\n\r\n      \r\n\r\n    const applyDiscount = async (total) => {\r\n        discountPercentage = document.querySelector('#discountPercentage').value;\r\n        discountInEuro = document.querySelector('#discountEuro').value;\r\n        getTotalSum();\r\n        axios.post(HOST + '/cart/discount', { discountPercentage, discountInEuro });\r\n        console.log('discount')\r\n    }\r\n\r\n    const getTotalSum = () => {\r\n        let value = cart.reduce((sum, { price, quantity }) => sum + parseInt(price) * quantity, 0);\r\n        if(discountInEuro) {value -= discountInEuro}\r\n        if(discountPercentage) { value -= (value / 100) * discountPercentage}\r\n        setTotalPrice(value);\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n        <h1>Cart</h1>\r\n        {cart.length > 0 &&\r\n        <button onClick={clearCart}>Clear Cart</button>\r\n        }\r\n        <div className=\"products\">\r\n        {cart.map((product, key) => (\r\n            <div className=\"product\" key={key}>\r\n              <h3>{product.name}</h3>\r\n              <h4>$ {product.price}</h4>\r\n              <h4>{product.quantity}</h4>\r\n              <img src={HOST + '/' + product.image} alt={product.name} />\r\n              <button onClick={() => removeFromCart(product)}>Remove</button>\r\n          </div>\r\n        ))}\r\n        </div>\r\n        <h3>Discount %</h3>\r\n        <input type=\"text\" id=\"discountPercentage\"></input>\r\n        <h3>Discount $</h3>\r\n        <input type=\"text\" id=\"discountEuro\"></input><br/>\r\n        <button onClick={applyDiscount}>Apply discount</button>\r\n        \r\n        <div>Total: ${totalPrice}</div>\r\n        </>\r\n    )\r\n} ","D:\\Coding\\shopper\\src\\config.js",[],{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":6,"column":9,"nodeType":"43","messageId":"44","endLine":6,"endColumn":13},{"ruleId":"41","severity":1,"message":"45","line":1,"column":37,"nodeType":"43","messageId":"44","endLine":1,"endColumn":47},{"ruleId":"46","severity":1,"message":"47","line":9,"column":15,"nodeType":"48","endLine":12,"endColumn":6},{"ruleId":"41","severity":1,"message":"45","line":1,"column":38,"nodeType":"43","messageId":"44","endLine":1,"endColumn":48},{"ruleId":"46","severity":1,"message":"49","line":16,"column":8,"nodeType":"50","endLine":16,"endColumn":10,"suggestions":"51"},{"ruleId":"52","severity":1,"message":"53","line":21,"column":61,"nodeType":"54","messageId":"55","endLine":21,"endColumn":63},{"ruleId":"41","severity":1,"message":"56","line":31,"column":14,"nodeType":"43","messageId":"44","endLine":31,"endColumn":20},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"no-unused-vars","'HOST' is defined but never used.","Identifier","unusedVar","'useContext' is defined but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'getTotalSum'. Either include it or remove the dependency array.","ArrayExpression",["59"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'result' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"60","fix":"61"},"Update the dependencies array to be: [getTotalSum]",{"range":"62","text":"63"},[374,376],"[getTotalSum]"]